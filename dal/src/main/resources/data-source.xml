<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:sharding="http://shardingsphere.io/schema/shardingsphere/sharding"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://shardingsphere.io/schema/shardingsphere/sharding
       http://shardingsphere.io/schema/shardingsphere/sharding/sharding.xsd">

	<!-- 阿里 druid 数据库连接池 -->
	<bean id="ds0" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<!-- 数据库基本信息配置 -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<!-- <property name="filters" value="${filters}" /> -->
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="${jdbc.minIdle}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<!-- <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" /> -->
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<!-- <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
		打开 removeAbandoned 功能
		<property name="removeAbandoned" value="${removeAbandoned}" />
		1800 秒，也就是 30 分钟
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
		关闭 abanded 连接时输出错误日志
		<property name="logAbandoned" value="${logAbandoned}" /> -->
	</bean>
	<bean id="ds1" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<!-- 数据库基本信息配置 -->
		<property name="url" value="${jdbc.url2}" />
		<property name="username" value="${jdbc.username2}" />
		<property name="password" value="${jdbc.password2}" />
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<!-- <property name="filters" value="${filters}" /> -->
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="${jdbc.minIdle}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<!-- <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" /> -->
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<!-- <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
		打开 removeAbandoned 功能
		<property name="removeAbandoned" value="${removeAbandoned}" />
		1800 秒，也就是 30 分钟
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
		关闭 abanded 连接时输出错误日志
		<property name="logAbandoned" value="${logAbandoned}" /> -->
	</bean>

	<!-- 分库算法 -->
	<sharding:inline-strategy id="databaseStrategy" sharding-column="id" algorithm-expression="ds$->{id % 2}" />
	<!-- 分表算法 -->
	<sharding:inline-strategy id="orderTableStrategy" sharding-column="age" algorithm-expression="user_$->{age % 2}" />
	<sharding:data-source id="dataSource">
		<sharding:sharding-rule data-source-names="ds0,ds1" default-data-source-name="ds0">
			<sharding:table-rules>
				<sharding:table-rule logic-table="user" actual-data-nodes="ds$->{0..1}.user_$->{0..1}"
									 database-strategy-ref="databaseStrategy"
									 table-strategy-ref="orderTableStrategy" />
			</sharding:table-rules>
		</sharding:sharding-rule>
	</sharding:data-source>

	<!-- 在使用mybatis时 spring使用sqlsessionFactoryBean 来管理mybatis的sqlsessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- mybatis配置文件路径 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 实体类映射文件路径,这里只有一个就写死了，多个可以使用mybatis/*.xml来替代 -->
		<property name="mapperLocations" value="classpath:mybatis/*.xml" />
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0">
			<ref bean="sqlSessionFactory" />
		</constructor-arg>
	</bean>
	<!--动态代理实现 不用写dao的实现 -->
	<bean id="MapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 这里的basePackage 指定了dao层接口路劲，这里的dao接口不用自己实现 -->
		<property name="basePackage" value="pxf.weixin.dao" />
		<!-- 如果只有一个数据源的话可以不用指定，但是如果有多个数据源的话必须要指定 -->
		<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" 
			/> -->
		<!--直接指定了sqlsessionTemplate名称，这个和上面的其实是一样的 -->
		<!-- <property name="sqlSessionTemplateBeanName" value="sqlSession" /> -->
	</bean>
	<!--事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 使用全注释事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>